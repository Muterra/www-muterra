<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>muterra</title><link href="/blog/" rel="alternate"></link><link href="/blog/feeds/all.atom.xml" rel="self"></link><id>/blog/</id><updated>2015-10-22T12:31:00-07:00</updated><entry><title>Golix technical primer</title><link href="/blog/muse-technical-primer.html" rel="alternate"></link><updated>2015-10-22T12:31:00-07:00</updated><author><name>Nick Badger</name></author><id>tag:,2015-10-22:blog/muse-technical-primer.html</id><summary type="html">&lt;h1&gt;Keep it simple, stupid&lt;/h1&gt;
&lt;p&gt;Golix is a decentralized encrypted social media protocol.&lt;/p&gt;
&lt;p&gt;It is currently under development by &lt;a href="https://www.muterra.io"&gt;Muterra, Inc&lt;/a&gt;, co-evolving with the Ethyr social network.&lt;/p&gt;
&lt;h2&gt;Okay, too simple&lt;/h2&gt;
&lt;p&gt;Golix is an open, encrypted, and decentralized protocol for anything social. The goal is to consolidate and standardize all of the shared infrastructure that any new social application requires (content management, sharing management, and identity management). By doing that, we can minimize the barriers to creating new applications, while maximizing personal agency and privacy.&lt;/p&gt;
&lt;p&gt;Crucially, &lt;strong&gt;all operations on Golix are cryptographically enforced&lt;/strong&gt;. The protocol eschews "privacy by promise" and opts instead to create a general-purpose, many-to-many encrypted network with asynchronous/offline retrieval and real-time capability. &lt;strong&gt;It does not require everyone to operate their own server&lt;/strong&gt;, and nor does platform-based hosting compromise privacy or security for applications built on Golix.&lt;/p&gt;
&lt;p&gt;Like the Rust programming language, Golix aspires to be a &lt;a href="http://blog.rust-lang.org/2015/05/11/traits.html"&gt;zero-cost abstraction&lt;/a&gt;: what you don't use, you don't pay for; what you do use, you couldn't hand-code any better. Unlike previous federated social protocols (Diaspora, Tent, Hubzilla, etc), Golix operates at a highly-restricted abstraction: it produces authenticated, confidential, verified byte messages from arbitrary, insecure bytestream sources, but places no restrictions or specifications of what those messages might be.&lt;/p&gt;
&lt;p&gt;Quick technical overview:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;End-to-end symmetric encryption for all data, eliminating site-specific privacy concerns.&lt;/li&gt;
&lt;li&gt;A unified protocol interface for storing persistent objects on any network data host&lt;/li&gt;
&lt;li&gt;Asynchronous communication for the entire network, constructed using that storage protocol as a buffer&lt;/li&gt;
&lt;li&gt;Static and dynamic content-based addresses (GUIDs) bound to individual data containers by any network participants&lt;/li&gt;
&lt;li&gt;Object deletion via garbage collection of any unreferenced containers&lt;/li&gt;
&lt;li&gt;Container key exchange through symmetric inter-agent API sessions initiated with asymmetric API handshakes&lt;/li&gt;
&lt;li&gt;Network "identity" definition through self-hosted public key infrastructure&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;How does Golix change things?&lt;/h2&gt;
&lt;p&gt;In short, Golix is an overlay network that encrypts everything &lt;em&gt;not just from device to device&lt;/em&gt;, but from entity to entity. It readdresses communications directly between the participants' digital identities (essentially their public keys), instead of (for example) the IP addresses of their devices. The protocol implementation abstracts away data transport, so physical addresses are transparent to applications, making them free to focus on high-level concepts like "Paypal, tell Alice her account balance".&lt;/p&gt;
&lt;p&gt;We use the internet like this:&lt;/p&gt;
&lt;div class="code_highlight"&gt;&lt;pre&gt;1. Bob sends Alice a message that they&amp;#39;re out of toilet paper
2. Alice tells Paypal to withdraw money from her bank account
3. Paypal asks Alice&amp;#39;s bank for money
4. Alice&amp;#39;s orders TP from Amazon
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alice, Bob, Paypal, Amazon, etc are all "agents" (they can independently manipulate data). The way we actually &lt;em&gt;use&lt;/em&gt; the internet, then, is &lt;em&gt;agent-oriented&lt;/em&gt;. However, networks only know how to talk like this: &lt;/p&gt;
&lt;div class="code_highlight"&gt;&lt;pre&gt;1. 73.36.202.142 sends 88.41.145.167 &amp;quot;we&amp;#39;re out of toilet paper&amp;quot;
2. 88.41.145.167 sends (wwww.paypal.com = 66.211.169.66) &amp;quot;withdraw money from Alice&amp;#39;s bank account&amp;quot;
3. (wwww.paypal.com = 66.211.169.66) sends (www.wellsfargo.com = 159.45.2.145) &amp;quot;withdraw money from Alice&amp;#39;s account&amp;quot;
4. 88.41.145.167 sends (www.amazon.com = 72.21.206.6) &amp;quot;Alice orders TP&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course in reality, network infrastructure makes this &lt;em&gt;network-oriented&lt;/em&gt; architecture even more convoluted, and since Alice and Bob both might want to be offline from time to time, we also end up using intermediaries like &lt;code&gt;(www.gmail.com = 173.194.33.149)&lt;/code&gt; to send even the direct messages between the two agents.&lt;/p&gt;
&lt;p&gt;The Golix protocol sits on top of the &lt;a href="https://en.wikipedia.org/wiki/Transport_layer"&gt;transport layer&lt;/a&gt;, and below the &lt;a href="https://en.wikipedia.org/wiki/Application_layer"&gt;application layer&lt;/a&gt;. It translates Bob's application-level "send Alice a message" command into a format that the transport layer can deliver to Alice, regardless of what &lt;code&gt;123.123.123.123&lt;/code&gt; location she's at. It does this by universally defining:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How to keep data private&lt;/li&gt;
&lt;li&gt;How to store and transfer private data&lt;/li&gt;
&lt;li&gt;How Bob shares private data with Alice&lt;/li&gt;
&lt;li&gt;What, exactly, Bob means by "Alice"&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Problem flow&lt;/h1&gt;
&lt;p&gt;This outlines, from first principles, in a very dense and hard-to-process way, the protocol design decisions that lead to the Golix. It is exceptionally brief and does not justify the answers we've arrived at. However, it does explain the protocol architecture pretty thoroughly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem: create an asynchronous, agent-oriented, many-to-many overlay network. Solution: the Golix protocol.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; What is content? &lt;strong&gt;Solution:&lt;/strong&gt; Content is any arbitrary binary data. All content is encapsulated within containers that assure confidentiality, integrity, and authenticity.&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; How does an agent assure confidentiality? &lt;strong&gt;Solution:&lt;/strong&gt; Encrypt the container content.&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; How should content be encrypted? &lt;strong&gt;Solution:&lt;/strong&gt; It's of arbitrary length, so definitely symmetrically (as per usual!)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; How does another agent access the encrypted file in a many-to-many network? &lt;strong&gt;Solution:&lt;/strong&gt; Use a &lt;em&gt;separate&lt;/em&gt; key-sharing mechanism (see below).&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; How does an agent assure integrity? &lt;strong&gt;Solution:&lt;/strong&gt; They hash the encrypted container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; How does an agent assure authenticity? &lt;strong&gt;Solution:&lt;/strong&gt; They asymmetrically sign the container hash.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; How is the content identified on the network? &lt;strong&gt;Solution:&lt;/strong&gt; All containers are deterministically and uniquely content-addressed. In other words, content is identified by a collision-resistant cryptographic hash.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; How can this data be made asynchronously-available? &lt;strong&gt;Solution:&lt;/strong&gt; Any Golix-implementing network requires a persistence system. These are transport-specific. A conformant physical network node stores data on agents' behalf(s). Nodes may also bridge between transport-specific Golix implementations to automatically sync network state between them. Uploading is implicit, and the persistence system must understand several commands defined within the Golix spec.&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; What commands must a persistence system accept? &lt;strong&gt;Solution:&lt;/strong&gt; Publish, get, subscribe, unsubscribe, ack, nak, list node subscriptions, list object binders.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; How are these persistence systems standardized? &lt;strong&gt;Solution:&lt;/strong&gt; Each particular transport mechanism defines its own overlay standard for command format.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; How does the persistence system know to retain data? &lt;strong&gt;Solution:&lt;/strong&gt; Agents bind addresses to objects, reminiscent of a "call-by-assignment" programming language. Bindings may be created by any agent, regardless of data authorship. This prevents problematic deletion. Objects are always static, but bindings may also be dynamic (which creates a secondary address).&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; How does the persistence system know when to remove data? &lt;strong&gt;Solution:&lt;/strong&gt; When all bindings have been removed through "debind" commands, the persistence system garbage collects the object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; How can an author-agent remove undesired content that has been bound by a different agent? &lt;strong&gt;Solution:&lt;/strong&gt; Binding records include the binder as public metadata. Persistence systems must include a command to list the agents who have bound to a particular piece of content. The author may then exert social/political/legal pressure on those binders for them to remove the binding.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; What is sharing? &lt;strong&gt;Solution:&lt;/strong&gt; An exchange of symmetric encryption keys.&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; How is this accomplished in a many-to-many network? &lt;strong&gt;Solution:&lt;/strong&gt; Separate the key exchange from the content itself. Content is uniquely and trivially addressable, and access is shared one-to-one between agents. Note that agents may be computational, so public information may be automatically shared across communities of any size.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; How do you perform secure online key exchange? &lt;strong&gt;Solution:&lt;/strong&gt; Initially, through a special asymmetrically-encrypted handshake object. These are distributed like any other Golix content, but contain a public reference to their agent-target. Unlike standard objects, their author is named privately, within the container body.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; Doesn't this hinge on the secrecy of the target's asymmetric private key? Can we get forward secrecy, etc? &lt;strong&gt;Solution:&lt;/strong&gt; Absolutely. The handshake object &lt;em&gt;could&lt;/em&gt; be used directly for every key exchange, but that would be both insecure and inefficient. The preferred method is to use the handshake to bootstrap a dynamic bidirectional communication pipe between two agents, and then use that for key exchange. The API definition for that key exchange pipe is out-of-scope for Golix itself, but candidates will be defined within overlay standards. Because it is encapsulated within the Golix symmetric pipe, it can be any binary message format.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; What is an agent? &lt;strong&gt;Solution:&lt;/strong&gt; An agent produces, accesses, shares, or retains content.&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; An agent must be uniquely identifiable and network-available. &lt;strong&gt;Solution:&lt;/strong&gt; Put the agent's entire identity within a single, standard content container on the network. These containers are themselves encrypted, so if the identity is public, it must then be bootstrapped (this process is defined in an overlay standard). Use their identity container's content address as their unique identifier.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; The agent requires an asymmetric public key for signing content. &lt;strong&gt;Solution:&lt;/strong&gt; Add that key to the container file.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; The agent requires an asymmetric public key for receiving encrypted pipes. &lt;strong&gt;Solution:&lt;/strong&gt; Add that key to the container file.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; How does an agent invisibly (to external parties) transition to a new identity? &lt;strong&gt;Solution:&lt;/strong&gt; Through a Diffie-Hellman-based identity exchange process.&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; Can this transition be made selectively deniable? &lt;strong&gt;Solution:&lt;/strong&gt; Yes, through clever sequencing of the exchange.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; How does an agent perform this exchange online? &lt;strong&gt;Solution:&lt;/strong&gt; The DHE public key must be made available at the time of identity creation, and is therefore stored with the rest of the identity's public keys (aka: add it to the container file).&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; Agents are meant to exist independently of physical devices, so they need online private key storage. &lt;strong&gt;Solution:&lt;/strong&gt; Out-of-scope, but defined within an overlay protocol.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problem:&lt;/strong&gt; How does the agent independently discover new content addresses? &lt;strong&gt;Solution:&lt;/strong&gt; Out-of-scope.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;See also&lt;/h1&gt;
&lt;p&gt;Our &lt;a href="https://github.com/Muterra/doc-golix"&gt;github repository for Golix documentation&lt;/a&gt; has substantially more information. Of particular interest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Muterra/doc-golix/blob/master/whitepaper.md"&gt;Whitepaper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Muterra/doc-golix/blob/master/design_philosophy.md"&gt;Design philosopy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Muterra/doc-golix/blob/master/yellowpaper.md"&gt;Yellowpaper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Golix"></category><category term="Implementation"></category><category term="Technical"></category></entry><entry><title>YC W2016 application</title><link href="/blog/ycw2016.html" rel="alternate"></link><updated>2015-10-15T11:11:00-07:00</updated><author><name>Nick Badger</name></author><id>tag:,2015-10-15:blog/ycw2016.html</id><summary type="html">&lt;h1&gt;What is Y Combinator?&lt;/h1&gt;
&lt;p&gt;If you're unfamiliar, &lt;a href="https://www.ycombinator.com/"&gt;Y Combinator&lt;/a&gt; is, for lack of a better concise term, a startup "accelerator". Startup accelerators are organizations that foster fast-growth companies, giving them access to experienced entrepreneurs and technical experts. For the duration of the program, the founders work intensely on the startup, culminating in a "demo day" for a substantial number of industry professionals and investors. They also typically provide a modest amount of money, and take a small amount of equity (at YC the "standard deal" is $120k for 7% equity). YC has a pretty impressive portfolio, but I'm drawn to them because they're known as a particularly founder-friendly organization, and their "graduate" network is unparalleled. YC operates three-month "batches" twice per year, starting in January and June.&lt;/p&gt;
&lt;p&gt;Muterra recently applied for the winter 2016 batch, and these are some highlights from our application. The application is essentially publicly available (anyone with an account can access it), so I'm not particularly concerned about posting their questions (or paraphrasings thereof) to give answers context.&lt;/p&gt;
&lt;h2&gt;Describe your company in 50 characters or less.&lt;/h2&gt;
&lt;p&gt;Decentralized social media protocol + platform.&lt;/p&gt;
&lt;h2&gt;What will you make?&lt;/h2&gt;
&lt;p&gt;A network called Ethyr, operating on a protocol called Golix. Reddit minimized barriers to creating and participating in internet forums with a centralized forum infrastructure. I want to do the same thing, but for &lt;em&gt;anything&lt;/em&gt; social, with a decentralized, encrypted protocol, and a platform to host it. The Golix protocol is that shared infrastructure: it provides content, identity, and sharing management portably and universally. We'll build Ethyr as the initial "subreddit".&lt;/p&gt;
&lt;h2&gt;Provide a 1 minute YouTube video introducing the founders.&lt;/h2&gt;
&lt;p&gt;Editorial note: I've added English captions to &lt;a href="https://www.youtube.com/watch?v=xNUma15JeYc"&gt;the video&lt;/a&gt; for muted viewing. Be sure to click the "English" and not the "English (auto-generated)" captions, or it'll be garbled.&lt;/p&gt;
&lt;h2&gt;How far along are you?&lt;/h2&gt;
&lt;p&gt;The Golix protocol is fairly stable, despite its sparse github page. Next steps are better documentation and then a security review. I've also experimented with two earlier protocol versions, and things look promising. Implementation will probably be around 3k LoC total and is ~40% done at the moment.&lt;/p&gt;
&lt;p&gt;The platform is just waiting for Golix code. The web architecture is set up on AWS and ready to go.&lt;/p&gt;
&lt;p&gt;Building the Ethyr social network on top of the platform is technically straightforward, because the protocol handles the brunt of the hard work. There are a few known unknowns here, but I've got a good sense for their timeline. User acquisition is the biggest wildcard.&lt;/p&gt;
&lt;h2&gt;Why this particular idea? Do you have domain expertise? How do you know it's needed?&lt;/h2&gt;
&lt;p&gt;I care deeply about personal agency in the digital world, and we don't have enough of it. I started designing an end-to-end encrypted social network and I realized that the problems are more fundamental than that. We need shared social infrastructure (identity, sharing, content management) that's encrypted for everyone, and that's what started Golix. Ethyr is the realization of that original network.&lt;/p&gt;
&lt;p&gt;I'm definitely domain "fluent" now, but I wasn't a year ago. I taught myself, 1) because I'm curious, and 2) for this project. I don't always have the right terminology, but I get things done anyway.&lt;/p&gt;
&lt;p&gt;I know people need this because I hear them talking about it, and because I need it myself. Also, google trends for "reddit/facebook/twitter/google alternative".&lt;/p&gt;
&lt;h2&gt;What's new about your approach, and what substitutes do people resort to without it?&lt;/h2&gt;
&lt;p&gt;I haven't seen anything quite like the Golix protocol before. TextSecure, OffTheRecord, and PGP-over-email are similar, but none of those can manage many-to-many asynchronous networks, and they all get the abstractions wrong, grossly limiting their usefulness.&lt;/p&gt;
&lt;p&gt;Specifically for the Ethyr network (security is hard to sell to a DTC market!), I've never seen sharing transparency or information filtering done right on existing social products. They'd be my focus for a public beta. Then, I'd like to negotiate the transition from meeting someone to actually knowing them. Meetup gets strangers to meet, but doesn't make them friends. Facebook is good for friends, but a terrible place to meet new people.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Editorial note: I'm not sure TextSecure, OTR, and PGP are necessarily fair comparisons, as they're all trying to address radically different scopes than Golix. The Diaspora, Hubzilla, Tent, etc protocols have closer aspirations and inspirations, but are at both an utterly different protocol level, as well as a fundamentally different implementation. I keep looking for other protocols trying to fill the void I'm addressing, but I've yet to find something I would describe unconditionally as a competing protocol.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;What do you "get" about your business that others don't?&lt;/h2&gt;
&lt;p&gt;Division of concerns and abstractions. Everyone is focused on either too many problems, or too few applications. Nothing strikes a balance you can describe with black boxes that isn't heavily tailored to a specific use case, and nothing scales well because of it. Example: it astounds me that social network builders create walled gardens of users when the single biggest entry barrier for social networks is user acquisition.&lt;/p&gt;
&lt;p&gt;And frankly, Facebook,Twitter, etc are just so decidedly anti-social. Ads keep the lights on, but I want social networks to be about people. I'm absolutely dead-set on proving that Facebook is not the future of humanity, and that networks built for people are more lucrative than ones built for advertisers.&lt;/p&gt;
&lt;h2&gt;Are there any other ideas you've considered applying with?&lt;/h2&gt;
&lt;p&gt;Version control so easy your grandmother could use it (on any kind of file). Solid modeling for the &amp;lt;$100 software market using a version-control-compatible file format (I already have 70% of an MVP for a git/solidworks merge tool). Integrated, agile hardware logistics management software. A stirling-cycle linear piston hybrid powerplant that I bet I could get to weigh about the same as a 2-stroke engine to put on medium-sized unmanned aircraft.&lt;/p&gt;</summary><category term="Golix"></category><category term="Ethyr"></category><category term="Muterra"></category></entry><entry><title>Golix overview</title><link href="/blog/muse-101.html" rel="alternate"></link><updated>2015-10-07T17:47:00-07:00</updated><author><name>Nick Badger</name></author><id>tag:,2015-10-07:blog/muse-101.html</id><summary type="html">&lt;p&gt;Though this blog is primarily focused on Ethyr, the Golix protocol is the technical meat and bones of this project. It is Ethyr's primary innovation and Muterra's core technology. As such, this blog is also a convenient place to talk about the protocol itself. What follows is a brief exploration thereof.&lt;/p&gt;
&lt;h2&gt;Golix&lt;/h2&gt;
&lt;p&gt;The abstract intent of the Golix protocol is deceptively simple. Imagine you've created some digital work: a quick text explanation of a project you're working on, for example. Now you'd like to share it with someone. Golix is designed to handle the sharing step as directly as possible, without requiring websites as middlemen - all while still ensuring that only your intended recipient(s) have access to the data. The goal is to make the actual process of sharing something as simple and exact as it seems it should be.&lt;/p&gt;
&lt;p&gt;It's worth noting that this bears a large resemblance to email in the early 2000's, when it was already quite popular, but most people only had a single address. If you wanted to share something with someone digitally, you sent them an email. It was easy and effective. But email (at least as we usually see it) is severely limited: it's &lt;a href="https://en.wikipedia.org/wiki/Email#Privacy_concerns"&gt;wholly insecure&lt;/a&gt;, incompatible with &lt;a href="https://en.wikipedia.org/wiki/Many-to-many"&gt;publication&lt;/a&gt;, slow, and awkward for everything except text. In contrast, Golix behaves like a modernized version of &lt;a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol"&gt;SMTP&lt;/a&gt;: it's encrypted, supports publicly-viewable data, is real-time capable, and works for any and all digital information.&lt;/p&gt;
&lt;p&gt;In other words, imagine a new version of email designed specifically for encrypted social networking. That means one-to-any support at a protocol level: you can "address" the "message" to any number of people, even the general public, or nobody. Golix accomplishes this by separating message delivery into the discrete concerns of &lt;a href="https://en.wikipedia.org/wiki/Persistent_memory"&gt;persistence&lt;/a&gt; and sharing. The message itself is encrypted at all times, and it can be "delivered" without a trusted server, because access sharing takes place directly between network participants. Note that, as participants may not have a 1-to-1 relationship with devices, this is a subtly different consideration than traditional &lt;a href="https://en.wikipedia.org/wiki/End-to-end_encryption"&gt;end-to-end encryption&lt;/a&gt;. And unlike email, Golix is not strictly an internet protocol: it is designed to work with any data connection between network peers. Golix is therefore not only capable of fluid transition to alternative network infrastructure (for example, a &lt;a href="http://www.bluetooth.com/Pages/Press-Releases-Detail.aspx?ItemID=224"&gt;Bluetooth mesh network&lt;/a&gt;), but also fully compatible with existing technologies like Websockets or WebRTC. And also unlike email, with its clumsy binary -&amp;gt; text -&amp;gt; ascii-armor transition for binary attachments, Golix is a natively binary protocol.&lt;/p&gt;
&lt;h2&gt;Protocol goals&lt;/h2&gt;
&lt;p&gt;Before discussing protocol technical requirements, I'd like to stress a few key points. Golix is a &lt;strong&gt;protocol&lt;/strong&gt;: not a platform, not a product. To use it, someone needs to write a protocol implementation. Though Golix is an openly-published protocol, implementations may be closed source. Furthermore, though the Golix &lt;em&gt;protocol&lt;/em&gt; is not married to any one data transport technology, Golix &lt;em&gt;implementations&lt;/em&gt; likely will be. Part of the hope here is to free social applications from data transport concerns and make them wholly network agnostic (and vice versa); this approach requires the implementations themselves to exclusively handle physical data delivery, and the applications to only handle information use. &lt;/p&gt;
&lt;p&gt;This greatly simplifies network innovation and enables application-independent, seamless transition between &lt;a href="https://en.wikipedia.org/wiki/Internet_protocol_suite"&gt;various&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Tor_%28anonymity_network%29"&gt;different&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Private_network"&gt;networking&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/MaidSafe"&gt;technologies&lt;/a&gt;. However, it also begets an important caveat: Golix's security is always beholden to the underlying transport layer. It is up to that transport layer and its Golix implementation to address network-level security risks, such as traffic analysis or hard IP address anonymity.&lt;/p&gt;
&lt;p&gt;At the other end of the Golix abstraction, the protocol also has limits. Though it stresses granting network &lt;a href="https://en.wikipedia.org/wiki/Agency_%28philosophy%29"&gt;agency&lt;/a&gt; to abstract digital "identities" instead of concrete physical devices, Golix does not concern itself with the specifics of those identities. They are the &lt;a href="https://en.wikipedia.org/wiki/Key_exchange"&gt;absolute minimum that is technically required by the protocol&lt;/a&gt;, and do not offer any inherent assertion or identity ownership. Such verification requirements are always application-specific, so the Golix protocol deliberately avoids them. All Golix-based applications may make use of any Golix identity, regardless of (or contingent upon) any identity verification. Storage container formats (even for Golix primitives like identity &lt;a href="https://en.wikipedia.org/wiki/Public-key_cryptography"&gt;public keys&lt;/a&gt;) are similarly out-of-scope; standardizing core implementation functionality will be independently approached with Golix overlay standards proposals.&lt;/p&gt;
&lt;p&gt;That being said, any application making use of any Golix implementation can expect:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Private, encrypted information transfer directly between explicitly-addressed parties with no trusted third party, over&lt;/li&gt;
&lt;li&gt;An &lt;a href="https://en.wikipedia.org/wiki/Asynchronous_communication#Electronically_mediated_communication"&gt;asynchronously&lt;/a&gt;-available &lt;a href="https://en.wikipedia.org/wiki/Persistent_memory"&gt;persistence system&lt;/a&gt; with indefinite storage capability, using&lt;/li&gt;
&lt;li&gt;Identity-based communication addressing (and therefore implying full device and network independence), with&lt;/li&gt;
&lt;li&gt;Implementation-specific delivery speeds, up to and including real-time, and&lt;/li&gt;
&lt;li&gt;Implementation-specific traffic capacity.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Golix"></category><category term="Technical"></category><category term="Implementation"></category></entry><entry><title>Status report Q3 2015</title><link href="/blog/status-2015-q3.html" rel="alternate"></link><updated>2015-10-05T14:46:00-07:00</updated><author><name>Nick Badger</name></author><id>tag:,2015-10-05:blog/status-2015-q3.html</id><summary type="html">&lt;p&gt;As explained in the &lt;a href="/blog/landscape-101.html"&gt;project introduction page&lt;/a&gt;, Ethyr has three major aspects: its protocol (Golix), its application (Ethyr itself), and its supporting company (Muterra). This section is a brief overview of their respective statuses as of the beginning of October 2015.&lt;/p&gt;
&lt;h1&gt;Muterra&lt;/h1&gt;
&lt;p&gt;Muterra, Inc is registered as a Delaware C Corporation, headquartered in Oakland, CA. It is currently a one-man shop (that's me, Nick Badger), though I have spoken with a friend about him possibly coming on board. That discussion is fairly early on and pending a bunch of (primarily financial) milestones on my end. &lt;/p&gt;
&lt;p&gt;On 4 September I left my previous position to focus on this project full-time. The timing was right for a variety of reasons, but everything was very much in its infancy. Muterra.io had a (very amateurish) landing webpage, and though I would guess I had compiled between 100 and 200 pages of notes by this point, I had very little to show for it.&lt;/p&gt;
&lt;p&gt;The decision to quit and work full-time on this project was admittedly an intimidating one, because I had/have effectively zero financial safety net (short of imploding my entire life and moving back in with my parents, which I do not consider an option). For reference, here are a bunch of financial details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Personal burn rate ~$3000/month&lt;ul&gt;
&lt;li&gt;$1200/mo rent&lt;/li&gt;
&lt;li&gt;$550/mo student loans&lt;/li&gt;
&lt;li&gt;$200/mo phone, utilities, etc&lt;/li&gt;
&lt;li&gt;$350/mo groceries (I average 3k-4k calories per day; it gets expensive)&lt;/li&gt;
&lt;li&gt;$75/mo transit&lt;/li&gt;
&lt;li&gt;$150/mo home consumables (sponges, cleaning stuff, TP, etc)&lt;/li&gt;
&lt;li&gt;~$475 left for everything else&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;~$7500 in savings after cashing final paycheck and after August bills&lt;/li&gt;
&lt;li&gt;~$5500 in reserve investments (goodbye, retirement account) post fees&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, with that said, with absolute zero receipts the financial timeline looks like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;4 Sept: Last day of steady paycheck. $7500&lt;/li&gt;
&lt;li&gt;~7 Oct: clear first bills cycle. $5200 (did better than expected!)&lt;/li&gt;
&lt;li&gt;~7 Nov: clear second bills cycle. $2200 est.&lt;/li&gt;
&lt;li&gt;~10 Nov: reserve pull #1. $4700 est.&lt;/li&gt;
&lt;li&gt;~7 Dec: clear third bills cycle. $1700 est.&lt;/li&gt;
&lt;li&gt;~10 Dec: reserve pull #2. $3700 est.&lt;/li&gt;
&lt;li&gt;~15 Dec: drop-dead financial date. Start looking for a job.&lt;/li&gt;
&lt;li&gt;~7 Jan: clear fourth bills cycle. $700 est.&lt;/li&gt;
&lt;li&gt;~ 31 Jan: start burning credit, or life starts financial implosion.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The company side of things is much simpler to account for.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Corporate burn rate &amp;lt;$50/month&lt;/li&gt;
&lt;li&gt;$350 in the bank&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the past month the financial situation has remained unchanged. For the company, the three primary developments have been:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Update &lt;a href="https://www.muterra.io"&gt;webpage&lt;/a&gt; to not be quite so amateurish, and create an independent site for Ethyr.&lt;/li&gt;
&lt;li&gt;Start talking about their existence.&lt;/li&gt;
&lt;li&gt;Square away some internal details (streamline records, clean up server pipeline, etc).&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Golix&lt;/h1&gt;
&lt;p&gt;As of 4 September 2015, the Golix protocol was at a serviceable draft level of completion: far enough along that I was comfortable writing prototype implementation software, but still nowhere near version 1.0. I had already written some preliminary experimental code of previous protocol versions, and they showed promise. &lt;/p&gt;
&lt;p&gt;Very little has changed with the protocol in the month since then. It is still &lt;a href="https://github.com/Muterra/doc-golix/tree/4402f99d3b9a5c3ab404875c16a33b0ce9e546ab"&gt;severely under-documented&lt;/a&gt;, though expanding and updating existing documentation, leading up to a security review, is the next step.&lt;/p&gt;
&lt;p&gt;At a very high level, the protocol is currently intended to convert a&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;data transport network&lt;/li&gt;
&lt;li&gt;capable of insecure binary message transmission&lt;/li&gt;
&lt;li&gt;between individual physical (or virtual) network nodes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;into a &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;secure &lt;a href="https://en.wikipedia.org/wiki/Overlay_network"&gt;overlay network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;capable of authenticated, confidential, verifiably intact binary message transmission&lt;/li&gt;
&lt;li&gt;between abstract network &lt;em&gt;participants&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The protocol operates at a fairly low level and defines a series of object containers and network administration object formats that support:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Private by default" information&lt;/li&gt;
&lt;li&gt;One-to-any communications&lt;/li&gt;
&lt;li&gt;Asynchronous data persistence&lt;/li&gt;
&lt;li&gt;Digital identity management&lt;/li&gt;
&lt;li&gt;Information sharing management&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, there are two work-in-progress Golix Overlay Standards proposals that outline:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A common public identity storage format&lt;/li&gt;
&lt;li&gt;A common private identity key storage format&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And two associated file formats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zbg, an unencrypted binary structured object serialization format&lt;/li&gt;
&lt;li&gt;harch, an unencrypted binary hyper-archive format&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are all, of course, subject to limitations and assumptions that will be outlined in future documents.&lt;/p&gt;
&lt;h1&gt;Ethyr&lt;/h1&gt;
&lt;p&gt;As of 4 September, Ethyr was only an idea and a bare domain. For all intents and purposes, it did not exist. Though it still isn't much closer to existing, that idea is starting to see the light of day, and I've made good progress (though it's felt too slow). The three highlights are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I have a much better sense of what I'd like to see for an alpha release&lt;/li&gt;
&lt;li&gt;Ethyr has a landing page and email list&lt;/li&gt;
&lt;li&gt;Ethyr now has a blog&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That doesn't sound like much, and in the grand scheme of things, it isn't. However, since I'm as short-staffed as I am, those last two points in particular entailed a whole lot of work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get AWS hosting infrastructure up&lt;ul&gt;
&lt;li&gt;Shared with Muterra.io&lt;/li&gt;
&lt;li&gt;It takes me only 5-10 minutes to update and deploy new static servers&lt;/li&gt;
&lt;li&gt;Auto-scaling server infrastructure to demand&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Catch up to the past &lt;strong&gt;10 years&lt;/strong&gt; of web development&lt;ul&gt;
&lt;li&gt;Re-familiarize with HTML&lt;/li&gt;
&lt;li&gt;Re-familiarize with CSS&lt;/li&gt;
&lt;li&gt;Re-familiarize with JS, including "huh, jquery looks neat"&lt;/li&gt;
&lt;li&gt;Learn how to do anything responsive&lt;/li&gt;
&lt;li&gt;Get comfortable with static site generation (using &lt;a href="http://docs.getpelican.com/en/3.6.3/index.html"&gt;Pelican&lt;/a&gt;, in my case)&lt;/li&gt;
&lt;li&gt;Get frustrated by existing blog template design&lt;/li&gt;
&lt;li&gt;Spend too long rolling your own&lt;/li&gt;
&lt;li&gt;Make a bunch of mistakes and learn from them&lt;/li&gt;
&lt;li&gt;Start boxing with the CSS box model&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Get a better artistic feel for web design&lt;ul&gt;
&lt;li&gt;Make a lot of mistakes and learn from them&lt;/li&gt;
&lt;li&gt;Do a lot of "comparison shopping"&lt;/li&gt;
&lt;li&gt;Small amount of asset creation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Actually announce Ethyr and then fight the few resulting fires on the landing page&lt;/li&gt;
&lt;li&gt;Integrate with external tools like Mailchimp&lt;/li&gt;
&lt;li&gt;Etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm happy to report that the learning curves have mostly subsided, and I can quite easily add new posts to a blog that I don't totally hate. There's definitely room for improvement, but given my limited supply of man-hours, I've shifted my priorities elsewhere.&lt;/p&gt;</summary><category term="Ethyr"></category><category term="Muterra"></category><category term="Golix"></category></entry><entry><title>Ethyr, Golix, and Muterra</title><link href="/blog/landscape-101.html" rel="alternate"></link><updated>2015-10-01T17:31:00-07:00</updated><author><name>Nick Badger</name></author><id>tag:,2015-10-01:blog/landscape-101.html</id><summary type="html">&lt;p&gt;I semi-officially announced this project about two weeks ago. As the bare-bones landing page up on the &lt;a href="https://www.ethyr.net"&gt;homepage&lt;/a&gt; is (intentionally) lacking any real substance, I've since had a number of friends ask for more details on the project. This post is an overview of what's what, to preemptively clarity future in-depth posts. &lt;strong&gt;Long story short: Ethyr is a new social network; it's being built on the &lt;a href="https://github.com/Muterra/doc-golix"&gt;Golix protocol&lt;/a&gt;; it's owned by &lt;a href="https://www.muterra.io"&gt;Muterra, Inc&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Ethyr, Golix, and Muterra&lt;/h2&gt;
&lt;p&gt;Possibly the most important confusion I've heard is one of names. We're increasingly acclimated to single-product tech companies: Dropbox &lt;em&gt;the company&lt;/em&gt; is known primarily for Dropbox &lt;em&gt;the service&lt;/em&gt;; Twitter &lt;em&gt;the company&lt;/em&gt; is known primarily for Twitter &lt;em&gt;the site&lt;/em&gt;, etc. Furthermore, these monolithic applications, generally speaking, operate from fairly basic building blocks like &lt;a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"&gt;HTTP&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/XMPP"&gt;XMPP&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol"&gt;SMTP&lt;/a&gt;, etc; other than exposing a product-specific &lt;a href="https://en.wikipedia.org/wiki/Application_programming_interface"&gt;API&lt;/a&gt;, it's rare for companies to develop new protocols for use in their frontline products.&lt;/p&gt;
&lt;p&gt;There are a lot of reasons why this happens, but there is a trend in larger, more mature tech companies (ex: Facebook, Google, Microsoft) towards product diversification. The recent Google restructuring into &lt;a href="https://abc.xyz"&gt;Alphabet&lt;/a&gt; is a costly example of this strategy being retroactively applied to the company as a whole. This kind of rebranding is something I would prefer heavily to avoid. Simultaneously, the single product / single company paradigm doesn't quite sit right with me: it feels both too limiting (we're only planning on building this one thing) and too self-important (we name everything we do after ourselves). Meanwhile the approach of a single company producing multiple products has long been the traditional norm for physical goods. So, I think my predilections are clear, and without further ado...&lt;/p&gt;
&lt;h2&gt;Golix&lt;/h2&gt;
&lt;p&gt;The Golix protocol is an open, secure approach for private-by-default social interaction. Put succinctly, it is designed to make sure everyone has control over who they are, what they say, and who they say it to.&lt;/p&gt;
&lt;p&gt;It is capable of decentralized operation but does not require it. It a &lt;a href="https://en.wikipedia.org/wiki/High-_and_low-level"&gt;mid-level&lt;/a&gt; protocol, sandwiched between &lt;a href="https://en.wikipedia.org/wiki/Transport_layer"&gt;physical data transport&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Application_layer"&gt;application operation&lt;/a&gt;. It focuses on turning a&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;data transport network&lt;/li&gt;
&lt;li&gt;capable of insecure binary message transmission&lt;/li&gt;
&lt;li&gt;between individual physical (or virtual) network nodes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;into a &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;secure &lt;a href="https://en.wikipedia.org/wiki/Overlay_network"&gt;overlay network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;capable of authenticated, confidential, verifiably intact binary message transmission&lt;/li&gt;
&lt;li&gt;between abstract network &lt;em&gt;participants&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Ethyr&lt;/h2&gt;
&lt;p&gt;Ethyr is a new social network. It is the first application built with the Golix protocol, and therefore also serves as its proof-of-concept. It will be both a reference use case for Golix protocol development, and a demonstration of the protocol's capabilities. It's also the culmination of a lot of work on Golix, and the embodiment of &lt;em&gt;why&lt;/em&gt; I started working on this project in the first place. Ethyr is by no means an afterthought! I really do want to turn Ethyr into a social network that I genuinely enjoy. That means a whole lot more than just respecting and protecting privacy: it means building a network, first and foremost, for people.&lt;/p&gt;
&lt;p&gt;With that said, Ethyr will undoubtedly have pretty humble beginnings. It will start as a kind of conversation-oriented publicly-publishable encrypted messaging client: a weird (but exciting) amalgamation of email, instant messaging, and Twitter, with very clear sharing controls. That's a bit of a mouthful, so in future posts I'll talk about what, exactly, my vision for the site is. But being Golix-based, Ethyr has incredible flexibility, so don't assume it will be stagnant!&lt;/p&gt;
&lt;h2&gt;Muterra, Inc&lt;/h2&gt;
&lt;p&gt;Muterra is the company I've started to actually &lt;em&gt;do&lt;/em&gt; something with the Golix protocol. You can't really propose something like this without a solid plan to make protocol development and maintenance not just financially feasible, but financially &lt;em&gt;attractive&lt;/em&gt;. As much as I would love to see a whole application ecosystem spontaneously spring to life around Golix, that simply isn't a realistic expectation.&lt;/p&gt;
&lt;p&gt;Muterra is my answer to that problem. For the moment it will focus fully on Ethyr, using it as a flagship product. Because Ethyr will be the first Golix application, and because Ethyr will be so heavily entangled with it, Muterra will also necessarily shepherd initial protocol development and upkeep. That isn't to say it will place an unacceptable burden on the company! The protocol manages social interactions, and if you're building a social network, you're going to deal with that problem no matter what.&lt;/p&gt;
&lt;p&gt;Initially, Muterra will make money only through Ethyr, but I have pretty lofty ambitions for the company. Longer-term, it will offer Golix implementations and platform infrastructure to commercial clients, and I have several Golix-based applications in mind beyond social networking.&lt;/p&gt;</summary><category term="Ethyr"></category><category term="Muterra"></category><category term="Golix"></category></entry></feed>